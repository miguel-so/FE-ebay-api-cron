const nodemailer = require('nodemailer');

class EmailService {
    constructor() {
        this.transporter = nodemailer.createTransporter({
            service: process.env.EMAIL_SERVICE || 'gmail',
            auth: {
                user: process.env.EMAIL_USER,
                pass: process.env.EMAIL_PASS
            }
        });
    }

    // Send notification email with ending listings
    async sendNotification(email, listings, criteria) {
        if (!listings || listings.length === 0) {
            console.log('No listings to notify about');
            return;
        }

        const subject = `üîî eBay Alert: ${listings.length} listing(s) ending soon!`;
        
        const html = this.generateEmailHTML(listings, criteria);
        const text = this.generateEmailText(listings, criteria);

        try {
            await this.transporter.sendMail({
                from: process.env.EMAIL_USER,
                to: email,
                subject: subject,
                text: text,
                html: html
            });

            console.log(`‚úÖ Notification sent to ${email} for ${listings.length} listings`);
        } catch (error) {
            console.error('‚ùå Error sending email:', error);
            throw error;
        }
    }

    // Generate HTML email content
    generateEmailHTML(listings, criteria) {
        const searchTerms = criteria.keyword ? ` for "${criteria.keyword}"` : '';
        
        let html = `
        <!DOCTYPE html>
        <html>
        <head>
            <style>
                body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
                .header { background: #e74c3c; color: white; padding: 20px; text-align: center; }
                .content { padding: 20px; }
                .listing { border: 1px solid #ddd; margin: 15px 0; padding: 15px; border-radius: 5px; }
                .listing h3 { color: #e74c3c; margin-top: 0; }
                .listing p { margin: 5px 0; }
                .price { font-size: 18px; font-weight: bold; color: #27ae60; }
                .time-left { color: #e74c3c; font-weight: bold; }
                .btn { background: #e74c3c; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; display: inline-block; margin-top: 10px; }
                .footer { background: #f8f9fa; padding: 15px; text-align: center; font-size: 12px; color: #666; }
            </style>
        </head>
        <body>
            <div class="header">
                <h1>üîî eBay Listing Alert</h1>
                <p>${listings.length} listing(s) ending soon${searchTerms}</p>
            </div>
            <div class="content">
        `;

        listings.forEach(listing => {
            const timeLeft = this.getTimeLeft(listing.endTime);
            html += `
                <div class="listing">
                    <h3>${listing.title}</h3>
                    <p class="price">$${listing.price}</p>
                    <p><strong>Bids:</strong> ${listing.bids}</p>
                    <p><strong>Condition:</strong> ${listing.condition}</p>
                    <p class="time-left">‚è∞ Ends in: ${timeLeft}</p>
                    <a href="${listing.url}" class="btn">View on eBay</a>
                </div>
            `;
        });

        html += `
            </div>
            <div class="footer">
                <p>This alert was generated by eBay Listing Monitor</p>
                <p>Search criteria: ${this.formatCriteria(criteria)}</p>
            </div>
        </body>
        </html>
        `;

        return html;
    }

    // Generate plain text email content
    generateEmailText(listings, criteria) {
        const searchTerms = criteria.keyword ? ` for "${criteria.keyword}"` : '';
        
        let text = `eBay Listing Alert\n`;
        text += `==================\n\n`;
        text += `${listings.length} listing(s) ending soon${searchTerms}\n\n`;

        listings.forEach((listing, index) => {
            const timeLeft = this.getTimeLeft(listing.endTime);
            text += `${index + 1}. ${listing.title}\n`;
            text += `   Price: $${listing.price}\n`;
            text += `   Bids: ${listing.bids}\n`;
            text += `   Condition: ${listing.condition}\n`;
            text += `   Ends in: ${timeLeft}\n`;
            text += `   Link: ${listing.url}\n\n`;
        });

        text += `Search criteria: ${this.formatCriteria(criteria)}\n`;
        text += `\nThis alert was generated by eBay Listing Monitor`;

        return text;
    }

    // Calculate time left until listing ends
    getTimeLeft(endTime) {
        const now = new Date();
        const end = new Date(endTime);
        const diff = end - now;

        if (diff <= 0) {
            return 'Ended';
        }

        const minutes = Math.floor(diff / 60000);
        const hours = Math.floor(minutes / 60);
        const days = Math.floor(hours / 24);

        if (days > 0) {
            return `${days}d ${hours % 24}h ${minutes % 60}m`;
        } else if (hours > 0) {
            return `${hours}h ${minutes % 60}m`;
        } else {
            return `${minutes}m`;
        }
    }

    // Format search criteria for display
    formatCriteria(criteria) {
        const parts = [];
        if (criteria.keyword) parts.push(`Keyword: "${criteria.keyword}"`);
        if (criteria.category) parts.push(`Category: ${criteria.category}`);
        if (criteria.condition) parts.push(`Condition: ${criteria.condition}`);
        if (criteria.minPrice || criteria.maxPrice) {
            const priceRange = [];
            if (criteria.minPrice) priceRange.push(`$${criteria.minPrice}`);
            priceRange.push('to');
            if (criteria.maxPrice) priceRange.push(`$${criteria.maxPrice}`);
            parts.push(`Price: ${priceRange.join(' ')}`);
        }
        if (criteria.minBids) parts.push(`Min Bids: ${criteria.minBids}`);
        
        return parts.join(', ') || 'No specific criteria';
    }

    // Test email configuration
    async testConnection() {
        try {
            await this.transporter.verify();
            console.log('‚úÖ Email service configured successfully');
            return true;
        } catch (error) {
            console.error('‚ùå Email service configuration failed:', error);
            return false;
        }
    }
}

module.exports = EmailService;
